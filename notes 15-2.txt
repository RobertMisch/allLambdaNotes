notes 15-2

def binary_search(arr, target):
    # Your code here
    # we're searching in between the low and high indices 
    low = 0
    high = len(arr) - 1
​
    # loop so long as low hasn't moved passed high
    while low <= high:
        mid = (low + high) // 2
​
        # base case where we've found our target 
        if arr[mid] == target:
            return mid
        elif target < arr[mid]:
            # toss out the right side since the target 
            # has to be on the left side 
            # do this by setting high to be mid - 1
            high = mid - 1
        else:
            # toss out the left side since the target
            # has to be on the right side 
            # do this by setting low to mid + 1
            low = mid + 1
​
    return -1  # not found

def selection_sort(arr):
    # loop through n-1 elements
    for i in range(0, len(arr) - 1):
        sorted_boundary = i
        smallest_index = sorted_boundary
        # TO-DO: find next smallest element
        # (hint, can do in 3 loc)
        # Your code here
        # iterate through the unsorted portion of the array 
        # finding the index of the smallest element in the unsorted portion
        for unsorted_index in range(sorted_boundary, len(arr)):
            # if we find a value < smallest_index element,
            # update our smallest_index variable 
            if arr[unsorted_index] < arr[smallest_index]:
                smallest_index = unsorted_index
​
        # TO-DO: swap
        # Your code here
        # we've found the smallest element in the unsorted portion 
        # swap it with the element right next to the boundary 
        arr[smallest_index], arr[sorted_boundary] = arr[sorted_boundary], arr[smallest_index]
​
    return arr

def bubble_sort(arr):
	# it traverses the array
    # loop until no more swaps occur 
    swaps_occurred = True
​
    while swaps_occurred:
        swaps_occurred = False 
​
        for i in range(0, len(arr)-1):
            # compare two elements 
            if arr[i] > arr[i+1]:
                # swaps them if the two elements aren't in order 
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swaps_occurred = True
				
	return arr

def bubble_sort(arr, unsorted_length):
    # find the unsorted_length 
    # iterate through the arr
    # figure out, starting from the right side, how many elements 
    # of the array are sorted 
    # recursive implementation of bubble sort 
    # base case 
    # what's the length of the unsorted portion of our array? 
    # once we get to an empty unsorted portion, then everything is sorted 
    # how are we moving closer to our base case? 
    for i in range(0, unsorted_length - 1):
        # compare two elements 
        if arr[i] > arr[i+1]:
            # swaps them if the two elements aren't in order 
            arr[i], arr[i+1] = arr[i+1], arr[i]
​
    # we've done one iteration of the swapping, check to see 
    # if there's more sorting to do 
    if unsorted_length > 0:
        bubble_sort(arr, unsorted_length - 1)