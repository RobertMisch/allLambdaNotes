notes 15-3

def find_smallest_missing(arr):
    # edge case: deal with edge case where 0 is missing 
    # check to make sure that 0 is at the front of the array 
    if arr[0] != 0:
        return 0
    # edge case: if no elements are missing, return the element right 
    # after the last element  
​
    # loop through the arr
    # need to loop till len(arr)-1 since we're checking
    # for the i+1 element 
    for i in range(len(arr)-1):
        # check the element adjacent to the current 
        # make sure that the adjacent element == current + 1
        if arr[i+1] != arr[i] + 1:
            # if adjacent element != current + 1
            # then we know that current + 1 _should_ be there 
            # but it isn't 
            # so return current + 1 
            return arr[i] + 1
​
    # if we get out of the for loop, then we didn't find any missing 
    # elements 
    return arr[-1] + 1
​
A = [0, 1, 2, 3, 4, 5, 6]
print(find_smallest_missing(A))

# working with singly linked lists here 
def find_middle_node_of_linked_list(ll):
    # idea 1:
    # get the length of the linked list 
    # how do we get the length? 
    # traverse the linked list and keep a counter to 
    # count how many jumps we make until we reach the end 
    # once we know the length, we can calculate the midpoint 
    # of that length 
    # use the midpoint formula from binary search 
    # start from the head of the linked list, jump until we
    # reach the midpoint node 
​
    # idea 2:
    # use two pointers that we'll start at the head of the list
    # the two pointers will run at different speeds:
    # one pointer will run at twice the speed of the other
    fast = ll
    slow = ll 
    # how do we have a pointer run at twice the speed of another? 
    # how do we update the pointers as we're traversing? 
    # if we iterate our slower pointer just as we would a "normal"
    # pointer while traversing a linked list 
    
    # while fast has not reached the end of the list yet 
    # how do we define "the end of the list"? 
    # fast is either on the None or fast is on the tail node 
    while fast and fast.next: 
        fast = fast.next.next 
        slow = slow.next
​
    # set fast = fast.next.next
    # once the faster pointer reaches the end of the list,
    # where will the slower pointer be? 
    # the slower pointer will be at the middle node 
    # return the node the slower pointer is pointing at 
    return slow 